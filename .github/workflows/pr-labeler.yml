name: PR Auto-Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  label:
    name: Auto-label PR
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Analyze commits and add labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Extract commit messages
            const messages = commits.map(c => c.commit.message);

            // Track which types are present
            const types = new Set();

            // Analyze commit types
            for (const msg of messages) {
              const match = msg.match(/^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\([a-z0-9_-]+\))?(!)?: /);
              if (match) {
                types.add(match[1]);
                // Check for breaking change
                if (match[3] === '!' || msg.includes('BREAKING CHANGE:')) {
                  types.add('breaking');
                }
              }
            }

            // Map commit types to labels
            const labelMap = {
              'feat': 'enhancement',
              'fix': 'bug',
              'docs': 'documentation',
              'style': 'style',
              'refactor': 'refactor',
              'perf': 'performance',
              'test': 'testing',
              'chore': 'maintenance',
              'ci': 'ci/cd',
              'build': 'build',
              'revert': 'revert',
              'breaking': 'breaking change'
            };

            // Collect labels to add
            const labelsToAdd = [];
            for (const type of types) {
              if (labelMap[type]) {
                labelsToAdd.push(labelMap[type]);
              }
            }

            // Remove duplicates
            const uniqueLabels = [...new Set(labelsToAdd)];

            if (uniqueLabels.length > 0) {
              console.log(`Adding labels: ${uniqueLabels.join(', ')}`);

              // Add labels to PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: uniqueLabels
              });

              // Add comment with summary
              const typesList = Array.from(types).filter(t => t !== 'breaking').join(', ');
              const breakingNote = types.has('breaking') ? '\n\n‚ö†Ô∏è **This PR contains breaking changes!**' : '';

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `üè∑Ô∏è Auto-labeled based on commits: \`${typesList}\`${breakingNote}`
              });
            } else {
              console.log('No conventional commit types found, skipping labeling');
            }

      - name: Add size label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;

            let sizeLabel = '';
            if (total < 10) {
              sizeLabel = 'size/XS';
            } else if (total < 50) {
              sizeLabel = 'size/S';
            } else if (total < 200) {
              sizeLabel = 'size/M';
            } else if (total < 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            console.log(`PR size: ${total} lines (${additions} additions, ${deletions} deletions) ‚Üí ${sizeLabel}`);

            // Remove old size labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            for (const label of currentLabels) {
              if (label.name.startsWith('size/')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name,
                }).catch(() => {});
              }
            }

            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });
